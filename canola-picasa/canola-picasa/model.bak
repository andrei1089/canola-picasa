import os
import edje
import logging
import urllib
from manager import PicasaManager

from terra.core.task import Task
from terra.core.manager import Manager
from terra.core.model import Model, ModelFolder
from terra.core.threaded_func import ThreadedFunction


manager = Manager()
picasa_manager = PicasaManager()

PluginDefaultIcon = manager.get_class("Icon/Plugin")

Photos  = manager.get_class("Model/Folder/Image/All")

log = logging.getLogger("plugins.canola-picasa.model")

class Icon(PluginDefaultIcon):
    terra_type = "Icon/Folder"
    icon = "icon/main_item/photos_local"
    plugin = "canola-picasa"


class MainModelFolder(ModelFolder, Task):
    terra_type = "Model/Folder/Task/Image/Picasa"
    terra_task_type = "Task/Folder/Task/Image/Picasa"

    def __init__(self, parent):
        Task.__init__(self)
        ModelFolder.__init__(self, "Picasa plugin", parent)

    def do_load(self):
        AlbumModelFolder("local pictures", self)

class xyzModel(ModelFolder):
    terra_type = "Model/Folder/Task/Image/Picasa/Album"
    
    def __init__(self, name, parent):
        ModelFolder.__init__(self, name, parent)

    def request_thumbnail(self, end_callback=None):
        def request(*ignored):
            urllib.urlretrieve(self.thumb_url, self.thumb_local)

        def request_finished(exception, retval):
            if end_callback:
                end_callback()

        if not self.thumb_url or os.path.exists(self.thumb_local):
            if end_callback:
                end_callback()
        else:
            ThreadedFunction(request_finished, request).start()

class ServiceModelFolder(ModelFolder):
    terra_type = "Model/Folder/Task/Image/Picasa/Service"

    empty_msg = "No videos found"

    def __init__(self, name, parent):
        ModelFolder.__init__(self, name, parent)
        self.callback_notify = None

    def do_load(self):
        self.search()

    def search(self, end_callback=None):
        del self.children[:]
        print "lenght= " + str(len(self.children))
        x = self.do_search()
        print "x length = " + str(len(x))

        #for c in x:
        #    self.children.append(c)
        
        print "lenght= " + str(len(self.children))



    def do_search(self):
        raise NotImplementedError("must be implemented by subclasses")

    def parse_entry_list(self, albums):
        lst = [] 

        for i in albums.entry:
            model = self._create_model_from_entry(i);
            lst.append(model)

        return lst
    
    def _create_model_from_entry(self, album ):
        
        log.debug("creating model for album_id  %s" % album.gphoto_id.text)

        #TODO: get thumb_location from plugin prefs

        model = xyzModel("album model", self)
        model.album_id = album.gphoto_id.text
        model.thumb_local = "~/.canola/picasa/thumbs/%s.jpg" % model.album_id
        model.thumb_url = album.media.thumbnail[0].url
        model.date = album.updated.text[:10]
        model.name = album.title.text
        model.description = album.summary.text
        model.cntPhotos = album.numphotos.text

        return model

class AlbumModelFolder(ServiceModelFolder):
    terra_type = "Model/Folder/Task/Image/Picasa/Service/AlbumModel"

    def __init__(self, name,parent):
        ServiceModelFolder.__init__(self, name, parent)
        picasa_manager = PicasaManager()
        
        picasa_manager.setUser('canolapicasa')
        picasa_manager.setPassword('1234abcd')
        #TODO: 

manager = Manager()
picasa_manager = PicasaManager()

PluginDefaultIcon = manager.get_class("Icon/Plugin")

Photos  = manager.get_class("Model/Folder/Image/All")

log = logging.getLogger("plugins.canola-picasa.model")

class Icon(PluginDefaultIcon):
    terra_type = "Icon/Folder"
    icon = "icon/main_item/photos_local"
    plugin = "canola-picasa"

class ListAlbums(ModelFolder):
    terra_type = "Model/Folder/Task/Image/Picasa/ListAlbums"

    def __init__(self, parent):
        ModelFolder.__init__(self, "List albums", parent)
        print "listalbums - init finished"

    def do_load(self):
        picasa_manager.setUser('canolapicasa')
        picasa_manager.setPassword('1234abcd')
        #TODO: Threaded login, check if login successful

        picasa_manager.login() 
        print "is_logged", picasa_manager.is_logged()
        print "user_name=", picasa_manager.getUser()

        albums = picasa_manager.get_user_albums()
        
        for i in albums.entry:
            print "list picture : ", i.title.text
            ListPictures(i.title.text, self, i)

class Picture(ModelFolder):
    terra_type="Model/Folder/Task/Image/Picasa"
    def __init__(self, name, parent, picture):
        ModelFolder.__init__(self, name, parent)
        self.picture = picture
      

class ListPictures(ModelFolder):
    terra_type = "Model/Folder/Task/Image/Picasa"

    def __init__(self,name, parent, album):
        ModelFolder.__init__(self,name, parent)	
        self.album = album
        print "getting photos"
        self.pictures = picasa_manager.get_photos_from_album(album)

    def do_load(self):
        for i in self.pictures.entry:
            Picture(i.title.text, self, i)


class MainModelFolder(ModelFolder, Task):
    terra_type = "Model/Folder/Task/Image/Picasa"
    terra_task_type = "Task/Folder/Task/Image/Picasa"

    def __init__(self, parent):
        Task.__init__(self)
        ModelFolder.__init__(self, "Picasa plugin", parent)

    def do_load(self):
#        ListAlbums(self)
#        LocalPictures("Local pictures", self)
        AlbumModelFolder("local pictures", self)

class xyzModel(ModelFolder):
    terra_type = "Model/Folder/Task/Image/Picasa/Album"
    
    def __init__(self, name, parent):
        ModelFolder.__init__(self, name, parent)

    def request_thumbnail(self, end_callback=None):
        def request(*ignored):
            urllib.urlretrieve(self.thumb_url, self.thumb_local)

        def request_finished(exception, retval):
            if end_callback:
                end_callback()

        if not self.thumb_url or os.path.exists(self.thumb_local):
            if end_callback:
                end_callback()
        else:
            ThreadedFunction(request_finished, request).start()

class ServiceModelFolder(ModelFolder):
    terra_type = "Model/Folder/Task/Image/Picasa/Service"

    empty_msg = "No videos found"

    def __init__(self, name, parent):
        ModelFolder.__init__(self, name, parent)
        self.callback_notify = None

    def do_load(self):
        self.search()

    def search(self, end_callback=None):
        del self.children[:]
        print "lenght= " + str(len(self.children))
        x = self.do_search()
        print "x length = " + str(len(x))

        #for c in x:
        #    self.children.append(c)
        
        print "lenght= " + str(len(self.children))



    def do_search(self):
        raise NotImplementedError("must be implemented by subclasses")

    def parse_entry_list(self, albums):
        lst = [] 

        for i in albums.entry:
            model = self._create_model_from_entry(i);
            lst.append(model)

        return lst
    
    def _create_model_from_entry(self, album ):
        
        log.debug("creating model for album_id  %s" % album.gphoto_id.text)

        #TODO: get thumb_location from plugin prefs

        model = xyzModel("album model", self)
        model.album_id = album.gphoto_id.text
        model.thumb_local = "/home/andrei/.canola/picasa/thumbs/%s.jpg" % model.album_id
        model.thumb_url = album.media.thumbnail[0].url
        model.date = album.updated.text[:10]
        model.name = album.title.text
        model.description = album.summary.text
        model.cntPhotos = album.numphotos.text

        return model

class AlbumModelFolder(ServiceModelFolder):
    terra_type = "Model/Folder/Task/Image/Picasa/Service/AlbumModel"

    def __init__(self, name,parent):
        ServiceModelFolder.__init__(self, name, parent)
        picasa_manager = PicasaManager()
        
        picasa_manager.setUser('andrei.mirestean')
        picasa_manager.setPassword('1#89simbiani')
        #TODO: Threaded login, check if login successful

        picasa_manager.login() 
        print "is_logged", picasa_manager.is_logged()
        print "user_name=", picasa_manager.getUser()

    def do_search(self):
        albums = picasa_manager.get_user_albums()
        return self.parse_entry_list(albums)
